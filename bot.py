import os
import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û–ï –ü–û–õ–£–ß–ï–ù–ò–ï –¢–û–ö–ï–ù–ê
def get_bot_token():
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token_from_env = os.environ.get("BOT_TOKEN")
    
    if token_from_env and token_from_env.strip() and token_from_env != "8268375064:AAE7Lujf07p6YiCV1lVrnIB1E8D_mzQOa2Q":
        logging.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return token_from_env
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω
        logging.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω. –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –¥–æ–±–∞–≤—å—Ç–µ BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return "8268375064:AAE7Lujf07p6YiCV1lVrnIB1E8D_mzQOa2Q"

BOT_TOKEN = get_bot_token()
CREATOR = "StarField"
CODER = "dewlops"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
games = {}
challenges = {}
user_data = {}
player_games = {}

# –°–ø–∏—Å–∫–∏ —Ñ—Ä–∞–∑ –¥–ª—è —Å–±–∏–≤–∞ –ø—Ä–∏—Ü–µ–ª–∞
AIM_DISRUPT_PHRASES = [
    "–ø—Ä–æ–∏–∑–Ω–æ—Å—è –¥—Ä–µ–≤–Ω–µ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ",
    "–∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ—Ö–Ω–∏–∫—É –Ω–∏–Ω–¥–∑—è",
    "—Å –ø–æ–º–æ—â—å—é –≥–∏–ø–Ω–æ–∑–∞",
    "–∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–ª—É –º—ã—Å–ª–∏",
    "–ø—Ä–æ–∏–∑–Ω–æ—Å—è –º–∞–Ω—Ç—Ä—É",
    "—Å –ø–æ–º–æ—â—å—é —Ç–µ–ª–µ–∫–∏–Ω–µ–∑–∞",
    "–∏—Å–ø–æ–ª—å–∑—É—è –º–∞–≥–∏—á–µ—Å–∫–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç",
    "–ø—Ä–æ–∏–∑–Ω–æ—Å—è –º–∞–≥–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ",
    "—Å –ø–æ–º–æ—â—å—é —Ç–µ—Ö–Ω–∏–∫–∏ –¥—ã—Ö–∞–Ω–∏—è",
    "–∏—Å–ø–æ–ª—å–∑—É—è –±–æ–µ–≤–æ–π –∫–ª–∏—á"
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    keyboard = [
        [InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –¥—É—ç–ª—å —Å –±–æ—Ç–æ–º", callback_data="battle_bot")],
        [InlineKeyboardButton("‚öîÔ∏è –í—ã–∑–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –Ω–∞ –¥—É—ç–ª—å", callback_data="challenge_info")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üë• –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url=f"https://t.me/{(await context.bot.get_me()).username}?startgroup=true")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö", callback_data="about_creators")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üéØ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Knife Duel Bot!*\n\n"
        "‚öîÔ∏è *–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
        "‚Ä¢ –î—É—ç–ª–∏ —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ PvP —Å—Ä–∞–∂–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏\n"
        "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≤—ã–∑–æ–≤–æ–≤ —á–µ—Ä–µ–∑ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ *–ù–æ–≤–æ–µ!* –°–±–∏–≤ –ø—Ä–∏—Ü–µ–ª–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞\n"
        "‚Ä¢ *–ù–æ–≤–æ–µ!* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö\n\n"
        "üéÆ *–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:*\n"
        "‚Ä¢ üéØ –ü—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ - +25% –∫ —à–∞–Ω—Å—É (–ø–µ—Ä–µ–¥–∞–µ—Ç —Ö–æ–¥)\n"
        "‚Ä¢ üî™ –ë—Ä–æ—Å–æ–∫ - –∞—Ç–∞–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (–ø–µ—Ä–µ–¥–∞–µ—Ç —Ö–æ–¥)\n"
        "‚Ä¢ üåÄ –°–±–∏–≤ –ø—Ä–∏—Ü–µ–ª–∞ - –æ–±–Ω—É–ª—è–µ—Ç –ø—Ä–∏—Ü–µ–ª –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (–ø–µ—Ä–µ–¥–∞–µ—Ç —Ö–æ–¥)\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è: 75%\n"
        "‚Ä¢ –ü—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è –¥–æ –±—Ä–æ—Å–∫–∞!"
    )
    
    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def about_creators(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö"""
    query = update.callback_query
    await query.answer()
    
    text = (
        "üë®‚Äçüíª *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö:*\n\n"
        f"üí° *–ò–¥–µ—è –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è:* {CREATOR}\n"
        f"‚öôÔ∏è *–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –∫–æ–¥:* {CODER}\n\n"
        "üéØ *Knife Duel Bot* - —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –¥—É—ç–ª–µ–π –≤ –º–µ—Ç–∞–Ω–∏–∏ –Ω–æ–∂–µ–π!\n\n"
        "üìß *–î–ª—è —Å–≤—è–∑–∏:* @starfieldx"
    )
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def challenge_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–∑–æ–≤–∞—Ö"""
    query = update.callback_query
    await query.answer()
    
    text = (
        "‚öîÔ∏è *–°–∏—Å—Ç–µ–º–∞ –≤—ã–∑–æ–≤–æ–≤ –Ω–∞ –¥—É—ç–ª—å:*\n\n"
        "üìù *–ö–∞–∫ –≤—ã–∑–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞:*\n"
        "1. –ù–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ —á–∞—Ç–µ\n"
        "2. –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: *–°—Ä–∞–∑–∏—Ç—å* –∏–ª–∏ *–î—É—ç–ª—å*\n"
        "3. –û–∂–∏–¥–∞—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è –≤—ã–∑–æ–≤–∞\n\n"
        "üéØ *–ò–≥—Ä–æ–∫ –ø–æ–ª—É—á–∏—Ç:*\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–∑–æ–≤–µ\n" 
        "‚Ä¢ –ö–Ω–æ–ø–∫–∏ –ü—Ä–∏–Ω—è—Ç—å/–û—Ç–∫–ª–æ–Ω–∏—Ç—å\n"
        "‚Ä¢ 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–≤–µ—Ç"
    )
    
    keyboard = [
        [InlineKeyboardButton("üéÆ –î—É—ç–ª—å —Å –±–æ—Ç–æ–º", callback_data="battle_bot")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def battle_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º"""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º
    game_id = f"pve_{user_id}"
    games[game_id] = {
        'aim': 0,
        'hp': 100,
        'enemy_hp': 100,
        'mode': 'pve',
        'player_id': user_id
    }
    player_games[user_id] = game_id
    
    await query.answer()
    await query.edit_message_text(
        text=f"ü§ñ *–î—É—ç–ª—å —Å –±–æ—Ç–æ–º!*\n\n‚ù§Ô∏è –í–∞—à–µ HP: 100\nüíÄ –ë–æ—Ç HP: 100\nüéØ –®–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è: 25%",
        reply_markup=game_keyboard_pve(),
        parse_mode='Markdown'
    )

async def handle_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—ã–∑–æ–≤–æ–≤"""
    if not update.message or not update.message.reply_to_message:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = update.message.text.lower().strip() if update.message.text else ""
    
    # –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞
    challenge_commands = ["—Å—Ä–∞–∑–∏—Ç—å", "–¥—É—ç–ª—å", "–≤—ã–∑–æ–≤", "–≤—ã–∑–≤–∞—Ç—å", "–±–æ–π", "–ø–æ–µ–¥–∏–Ω–æ–∫"]
    
    if message_text in challenge_commands:
        await create_challenge(update, context)

async def create_challenge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞ —á–µ—Ä–µ–∑ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        challenger = update.message.from_user
        target_message = update.message.reply_to_message
        target_user = target_message.from_user
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.info(f"–í—ã–∑–æ–≤ –æ—Ç {challenger.id} ({challenger.first_name}) –¥–ª—è {target_user.id} ({target_user.first_name})")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        if challenger.id == target_user.id:
            await update.message.reply_text(
                "‚ùå –ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –Ω–∞ –¥—É—ç–ª—å!",
                reply_to_message_id=update.message.message_id
            )
            return
        
        if challenger.id in challenges:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤!",
                reply_to_message_id=update.message.message_id
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–∑–æ–≤
        challenges[challenger.id] = {
            'target_id': target_user.id,
            'challenger_name': challenger.first_name,
            'target_name': target_user.first_name,
            'chat_id': update.message.chat_id,
            'message_id': update.message.message_id,
            'timestamp': update.message.date.timestamp()
        }
        
        user_data[challenger.id] = challenger.first_name
        user_data[target_user.id] = target_user.first_name
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –≤—ã–∑–æ–≤–∞
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤", callback_data=f"accept_{challenger.id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{challenger.id}")
            ]
        ]
        
        challenge_text = (
            f"‚öîÔ∏è *–í–´–ó–û–í –ù–ê –î–£–≠–õ–¨!*\n\n"
            f"üéØ *{challenger.first_name}* –≤—ã–∑—ã–≤–∞–µ—Ç –≤–∞—Å –Ω–∞ –±–æ–π!\n"
            f"üí¨ –ò–∑ —á–∞—Ç–∞: {update.message.chat.title if update.message.chat.title else '–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è'}\n"
            f"‚è∞ –£ –≤–∞—Å 60 —Å–µ–∫—É–Ω–¥ —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –≤ –õ–°
        try:
            await context.bot.send_message(
                chat_id=target_user.id,
                text=challenge_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ —á–∞—Ç–µ
            await update.message.reply_text(
                f"üéØ *{challenger.first_name}* –≤—ã–∑–≤–∞–ª –Ω–∞ –¥—É—ç–ª—å *{target_user.first_name}*! "
                f"–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...",
                reply_to_message_id=update.message.message_id,
                parse_mode='Markdown'
            )
            
            logging.info(f"–í—ã–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–≥—Ä–æ–∫—É {target_user.id}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–∑–æ–≤–∞: {e}")
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ *{target_user.first_name}*. "
                f"–í–æ–∑–º–æ–∂–Ω–æ, –∏–≥—Ä–æ–∫ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞ —á–µ—Ä–µ–∑ /start",
                reply_to_message_id=update.message.message_id,
                parse_mode='Markdown'
            )
            if challenger.id in challenges:
                del challenges[challenger.id]
                
    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ create_challenge: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã–∑–æ–≤–∞",
            reply_to_message_id=update.message.message_id
        )

async def handle_challenge_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—ã–∑–æ–≤"""
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    
    try:
        if data.startswith('accept_'):
            challenger_id = int(data.split('_')[1])
            
            if challenger_id in challenges:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –≤—ã–∑–æ–≤ (–±–æ–ª—å—à–µ 60 —Å–µ–∫—É–Ω–¥)
                challenge_data = challenges[challenger_id]
                current_time = update.callback_query.message.date.timestamp()
                if current_time - challenge_data['timestamp'] > 60:
                    await query.answer("‚ùå –í—Ä–µ–º—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –≤—ã–∑–æ–≤–∞ –∏—Å—Ç–µ–∫–ª–æ!", show_alert=True)
                    del challenges[challenger_id]
                    await query.message.edit_text("‚è∞ –í—Ä–µ–º—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –≤—ã–∑–æ–≤–∞ –∏—Å—Ç–µ–∫–ª–æ!")
                    return
                
                # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É PvP
                await start_pvp_game(query, context, challenger_id, user_id)
            else:
                await query.answer("‚ùå –í—ã–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª!", show_alert=True)
        
        elif data.startswith('decline_'):
            challenger_id = int(data.split('_')[1])
            
            if challenger_id in challenges:
                challenge_data = challenges[challenger_id]
                challenger_name = challenge_data['challenger_name']
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ
                try:
                    await context.bot.send_message(
                        chat_id=challenger_id,
                        text=f"‚ùå {query.from_user.first_name} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å!"
                    )
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –≥—Ä—É–ø–ø–µ –µ—Å–ª–∏ –≤—ã–∑–æ–≤ –±—ã–ª –∏–∑ –≥—Ä—É–ø–ø—ã
                    if challenge_data['chat_id'] != query.message.chat_id:  # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –∏–∑ –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞
                        await context.bot.send_message(
                            chat_id=challenge_data['chat_id'],
                            text=f"‚ùå {query.from_user.first_name} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å –æ—Ç {challenger_name}!",
                            reply_to_message_id=challenge_data.get('message_id')
                        )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                
                # –û—á–∏—â–∞–µ–º –≤—ã–∑–æ–≤
                del challenges[challenger_id]
                await query.message.edit_text(f"‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –≤—ã–∑–æ–≤ –æ—Ç {challenger_name}!")
            else:
                await query.answer("‚ùå –í—ã–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_challenge_response: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)
    
    await query.answer()

async def start_pvp_game(query: Update, context: ContextTypes.DEFAULT_TYPE, player1_id: int, player2_id: int):
    """–ù–∞—á–∞–ª–æ PvP –∏–≥—Ä—ã"""
    try:
        game_id = f"pvp_{player1_id}_{player2_id}"
        
        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
        games[game_id] = {
            'players': {
                player1_id: {'hp': 100, 'aim': 0, 'name': user_data.get(player1_id, "–ò–≥—Ä–æ–∫ 1")},
                player2_id: {'hp': 100, 'aim': 0, 'name': user_data.get(player2_id, "–ò–≥—Ä–æ–∫ 2")}
            },
            'current_turn': player1_id,
            'mode': 'pvp',
            'original_chat_id': challenges[player1_id]['chat_id'] if player1_id in challenges else None
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –∏–≥—Ä–æ–∫–æ–≤ —Å –∏–≥—Ä–æ–π
        player_games[player1_id] = game_id
        player_games[player2_id] = game_id
        
        # –û—á–∏—â–∞–µ–º –≤—ã–∑–æ–≤
        if player1_id in challenges:
            del challenges[player1_id]
        
        player1_name = user_data.get(player1_id, "–ò–≥—Ä–æ–∫ 1")
        player2_name = user_data.get(player2_id, "–ò–≥—Ä–æ–∫ 2")
        
        game_text = (
            f"‚öîÔ∏è *–î–£–≠–õ–¨ –ù–ê–ß–ê–õ–ê–°–¨!*\n\n"
            f"üî™ {player1_name} vs üî™ {player2_name}\n\n"
            f"*–•–æ–¥:* {player1_name}\n"
            f"‚ù§Ô∏è HP: 100 | ‚ù§Ô∏è HP: 100\n\n"
            f"üí° *–°—Ç—Ä–∞—Ç–µ–≥–∏—è:* –ü—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–µ—Ç —Ö–æ–¥, –Ω–æ —ç—Ñ—Ñ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–æ –±—Ä–æ—Å–∫–∞!"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
        await context.bot.send_message(
            chat_id=player1_id,
            text=game_text,
            reply_markup=game_keyboard_pvp(game_id, player1_id),
            parse_mode='Markdown'
        )
        
        await context.bot.send_message(
            chat_id=player2_id,
            text=game_text,
            reply_markup=game_keyboard_pvp(game_id, player2_id, is_current_turn=False),
            parse_mode='Markdown'
        )
        
        await query.message.edit_text("üéØ –î—É—ç–ª—å –Ω–∞—á–∞–ª–∞—Å—å! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º.")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —á–∞—Ç–µ –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –≥—Ä—É–ø–ø–æ–≤–æ–π –≤—ã–∑–æ–≤
        original_chat_id = games[game_id]['original_chat_id']
        if original_chat_id:
            try:
                await context.bot.send_message(
                    chat_id=original_chat_id,
                    text=f"üéØ –î—É—ç–ª—å –º–µ–∂–¥—É *{player1_name}* –∏ *{player2_name}* –Ω–∞—á–∞–ª–∞—Å—å!",
                    parse_mode='Markdown'
                )
            except:
                pass
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ PvP –∏–≥—Ä—ã: {e}")
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –¥—É—ç–ª–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–±–∞ –∏–≥—Ä–æ–∫–∞ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞.")

async def handle_game_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        if data.startswith('pvp_'):
            await handle_pvp_action(update, context)
        elif data in ['aim', 'throw', 'disrupt']:
            await handle_pve_action(update, context)
        else:
            await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_game_action: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

async def handle_pve_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ PvE –¥–µ–π—Å—Ç–≤–∏–π"""
    query = update.callback_query
    user_id = query.from_user.id
    action = query.data
    
    # –ò—â–µ–º –∏–≥—Ä—É –ø–æ user_id (–¥–ª—è PvE)
    game_id = player_games.get(user_id)
    if not game_id or game_id not in games:
        await query.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.")
        return
    
    game = games[game_id]
    if game.get('mode') != 'pve':
        await query.answer("‚ùå –≠—Ç–æ –Ω–µ PvE –∏–≥—Ä–∞!")
        return
    
    message = ""
    
    if action == "aim":
        game['aim'] = min(2, game['aim'] + 1)
        aim_bonus = game['aim'] * 25
        message = f"üéØ –í—ã –ø—Ä–∏—Ü–µ–ª–∏–ª–∏—Å—å! –®–∞–Ω—Å: {25 + aim_bonus}%"
    
    elif action == "disrupt":
        # –í PvE —Å–±–∏–≤ –ø—Ä–∏—Ü–µ–ª–∞ –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞, —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç –Ω–µ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–µ—Ç—Å—è
        message = "ü§ñ –ë–æ—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ!"
    
    elif action == "throw":
        hit_chance = 25 + (game['aim'] * 25)
        is_hit = random.randint(1, 100) <= hit_chance
        
        if is_hit:
            damage = random.randint(15, 25)
            game['enemy_hp'] -= damage
            message = f"‚úÖ –ü–æ–ø–∞–¥–∞–Ω–∏–µ! –£—Ä–æ–Ω: {damage}"
        else:
            message = "‚ùå –ü—Ä–æ–º–∞—Ö!"
        
        game['aim'] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∏—Ü–µ–ª –ø–æ—Å–ª–µ –±—Ä–æ—Å–∫–∞
        
        # –•–æ–¥ –±–æ—Ç–∞
        if game['enemy_hp'] > 0:
            enemy_damage = random.randint(10, 20)
            game['hp'] -= enemy_damage
            message += f"\nü§ñ –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç! –£—Ä–æ–Ω: {enemy_damage}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã
    if game['hp'] <= 0 or game['enemy_hp'] <= 0:
        if game['hp'] <= 0:
            result = "üíÄ –í–´ –ü–†–û–ò–ì–†–ê–õ–ò!"
            winner = "–ë–û–¢"
            loser = "–í–´"
        else:
            result = "üéâ –í–´ –ü–û–ë–ï–î–ò–õ–ò!"
            winner = "–í–´"
            loser = "–ë–û–¢"
        
        message += f"\n\n{result}\nüèÜ –ü–û–ë–ï–î–ò–¢–ï–õ–¨: {winner}\nüíÄ –ü–†–û–ò–ì–†–ê–í–®–ò–ô: {loser}\n\n‚ö° by {CREATOR}"
        
        # –û—á–∏—â–∞–µ–º –∏–≥—Ä—É
        if game_id in games:
            del games[game_id]
        if user_id in player_games:
            del player_games[user_id]
            
        await query.edit_message_text(text=message)
        return
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    aim_bonus = game['aim'] * 25
    await query.edit_message_text(
        text=f"ü§ñ *–î—É—ç–ª—å —Å –±–æ—Ç–æ–º:*\n‚ù§Ô∏è –í–∞—à–µ HP: {game['hp']}\nüíÄ –ë–æ—Ç HP: {game['enemy_hp']}\nüéØ –®–∞–Ω—Å: {25 + aim_bonus}%\n\n{message}",
        reply_markup=game_keyboard_pve(),
        parse_mode='Markdown'
    )
    
    await query.answer()

async def handle_pvp_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ PvP –¥–µ–π—Å—Ç–≤–∏–π —Å –ù–û–í–û–ô —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è"""
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    
    logging.info(f"PvP –¥–µ–π—Å—Ç–≤–∏–µ: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º game_id –∏–∑ callback_data
    parts = data.split('_')
    if len(parts) < 3:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö!")
        return
        
    action = parts[1]
    game_id = f"pvp_{parts[2]}_{parts[3]}" if len(parts) >= 4 else None
    
    if not game_id:
        await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç game_id!")
        return
    
    # –ò—â–µ–º –∏–≥—Ä—É
    if game_id not in games:
        await query.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    game = games[game_id]
    players = game['players']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á–µ–π —Å–µ–π—á–∞—Å —Ö–æ–¥
    if user_id != game['current_turn']:
        await query.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!")
        return
    
    current_player = user_id
    opponent_id = [pid for pid in players.keys() if pid != current_player][0]
    
    message = ""
    
    if action == "aim":
        # –ü—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–∏—Ü–µ–ª –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥
        players[current_player]['aim'] = min(2, players[current_player]['aim'] + 1)
        aim_bonus = players[current_player]['aim'] * 25
        message = f"üéØ {players[current_player]['name']} –ø—Ä–∏—Ü–µ–ª–∏–ª—Å—è! –¢–µ–∫—É—â–∏–π —à–∞–Ω—Å: {25 + aim_bonus}%\n\n"
        message += f"üí° –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–æ –≤–∞—à–µ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±—Ä–æ—Å–∫–∞!"
        
        # –ü—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ –í–°–ï–ì–î–ê –ø–µ—Ä–µ–¥–∞–µ—Ç —Ö–æ–¥
        game['current_turn'] = opponent_id
    
    elif action == "disrupt":
        if players[opponent_id]['aim'] > 0:
            # –°–±–∏–≤–∞–µ–º –ø—Ä–∏—Ü–µ–ª –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
            old_aim = players[opponent_id]['aim']
            players[opponent_id]['aim'] = 0
            disrupt_phrase = random.choice(AIM_DISRUPT_PHRASES)
            message = f"üåÄ {players[current_player]['name']} —Å–±–∏–ª –ø—Ä–∏—Ü–µ–ª {players[opponent_id]['name']}, {disrupt_phrase}!"
        else:
            message = f"üåÄ {players[opponent_id]['name']} –Ω–µ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–ª—Å—è!"
        # –°–±–∏–≤ –ø—Ä–∏—Ü–µ–ª–∞ –ø–µ—Ä–µ–¥–∞–µ—Ç —Ö–æ–¥
        game['current_turn'] = opponent_id
    
    elif action == "throw":
        # –ë—Ä–æ—Å–æ–∫ –Ω–æ–∂–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –ø—Ä–∏—Ü–µ–ª
        hit_chance = 25 + (players[current_player]['aim'] * 25)
        is_hit = random.randint(1, 100) <= hit_chance
        
        if is_hit:
            damage = random.randint(15, 25)
            players[opponent_id]['hp'] -= damage
            message = f"‚úÖ {players[current_player]['name']} –ø–æ–ø–∞–ª! –£—Ä–æ–Ω: {damage}"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è –µ—Å–ª–∏ –±—ã–ª
            if players[current_player]['aim'] > 0:
                message += f"\nüí´ –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è (+{players[current_player]['aim'] * 25}%) –ø–æ–º–æ–≥!"
        else:
            message = f"‚ùå {players[current_player]['name']} –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è!"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è –¥–∞–∂–µ –ø—Ä–∏ –ø—Ä–æ–º–∞—Ö–µ
            if players[current_player]['aim'] > 0:
                message += f"\nüí´ –ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ (+{players[current_player]['aim'] * 25}%)..."
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∏—Ü–µ–ª –ø–æ—Å–ª–µ –±—Ä–æ—Å–∫–∞
        players[current_player]['aim'] = 0
        # –ë—Ä–æ—Å–æ–∫ –ø–µ—Ä–µ–¥–∞–µ—Ç —Ö–æ–¥
        game['current_turn'] = opponent_id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã
    if players[current_player]['hp'] <= 0 or players[opponent_id]['hp'] <= 0:
        if players[current_player]['hp'] <= 0:
            winner = players[opponent_id]['name']
            loser = players[current_player]['name']
        else:
            winner = players[current_player]['name']
            loser = players[opponent_id]['name']
        
        result_text = (
            f"‚öîÔ∏è *–î–£–≠–õ–¨ –ó–ê–í–ï–†–®–ï–ù–ê!*\n\n"
            f"üèÜ *–ü–û–ë–ï–î–ò–¢–ï–õ–¨:* {winner}\n"
            f"üíÄ *–ü–†–û–ò–ì–†–ê–í–®–ò–ô:* {loser}\n\n"
            f"‚ö° by {CREATOR}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
        for pid in [current_player, opponent_id]:
            try:
                await context.bot.send_message(chat_id=pid, text=result_text, parse_mode='Markdown')
            except:
                pass
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —á–∞—Ç–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        original_chat_id = game.get('original_chat_id')
        if original_chat_id:
            try:
                await context.bot.send_message(
                    chat_id=original_chat_id,
                    text=f"‚öîÔ∏è *–†–ï–ó–£–õ–¨–¢–ê–¢ –î–£–≠–õ–ò:*\nüèÜ –ü–û–ë–ï–î–ò–¢–ï–õ–¨: {winner}\nüíÄ –ü–†–û–ò–ì–†–ê–í–®–ò–ô: {loser}",
                    parse_mode='Markdown'
                )
            except:
                pass
        
        # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        if game_id in games:
            del games[game_id]
        if current_player in player_games:
            del player_games[current_player]
        if opponent_id in player_games:
            del player_games[opponent_id]
            
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
    current_turn_name = players[game['current_turn']]['name']
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–∏—Ü–µ–ª—ã –∏–≥—Ä–æ–∫–æ–≤
    aim_info = ""
    for pid, pdata in players.items():
        if pdata['aim'] > 0:
            aim_info += f"üéØ {pdata['name']}: +{pdata['aim'] * 25}%\n"
    
    game_text = (
        f"‚öîÔ∏è *–î–£–≠–õ–¨*\n\n"
        f"üî™ {players[current_player]['name']}: ‚ù§Ô∏è {players[current_player]['hp']} HP\n"
        f"üî™ {players[opponent_id]['name']}: ‚ù§Ô∏è {players[opponent_id]['hp']} HP\n\n"
    )
    
    if aim_info:
        game_text += f"*–ü—Ä–∏—Ü–µ–ª—ã:*\n{aim_info}\n"
    
    game_text += f"*–°–µ–π—á–∞—Å —Ö–æ–¥:* {current_turn_name}\n\n{message}"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    await query.edit_message_text(
        text=game_text,
        reply_markup=game_keyboard_pvp(game_id, user_id, user_id == game['current_turn']),
        parse_mode='Markdown'
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
    try:
        await context.bot.send_message(
            chat_id=opponent_id,
            text=game_text,
            reply_markup=game_keyboard_pvp(game_id, opponent_id, opponent_id == game['current_turn']),
            parse_mode='Markdown'
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–ø–æ–Ω–µ–Ω—Ç—É: {e}")
    
    await query.answer()

def game_keyboard_pve():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è PvE"""
    keyboard = [
        [
            InlineKeyboardButton("üéØ –ü—Ä–∏—Ü–µ–ª–∏—Ç—å—Å—è", callback_data="aim"),
            InlineKeyboardButton("üî™ –ö–∏–Ω—É—Ç—å –Ω–æ–∂", callback_data="throw")
        ],
        [InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="battle_bot")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def game_keyboard_pvp(game_id: str, player_id: int, is_current_turn: bool = True):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è PvP —Å –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ game_id
    parts = game_id.split('_')
    if len(parts) >= 3:
        p1_id = parts[1]
        p2_id = parts[2]
        short_game_id = f"{p1_id}_{p2_id}"
    else:
        short_game_id = game_id
    
    if is_current_turn:
        keyboard = [
            [
                InlineKeyboardButton("üéØ –ü—Ä–∏—Ü–µ–ª–∏—Ç—å—Å—è", callback_data=f"pvp_aim_{short_game_id}"),
                InlineKeyboardButton("üî™ –ö–∏–Ω—É—Ç—å –Ω–æ–∂", callback_data=f"pvp_throw_{short_game_id}")
            ],
            [
                InlineKeyboardButton("üåÄ –°–±–∏—Ç—å –ø—Ä–∏—Ü–µ–ª", callback_data=f"pvp_disrupt_{short_game_id}")
            ]
        ]
    else:
        keyboard = [
            [InlineKeyboardButton("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...", callback_data="wait")]
        ]
    
    return InlineKeyboardMarkup(keyboard)

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    await start(update, context)

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n(—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n\n–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–±–µ–¥ –∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–π!"
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def set_commands(application: Application):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é"""
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("help", "–ü–æ–º–æ—â—å"),
        BotCommand("duel", "–í—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å")
    ]
    await application.bot.set_my_commands(commands)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", start))
        application.add_handler(CommandHandler("duel", start))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
        application.add_handler(CallbackQueryHandler(about_creators, pattern="^about_creators$"))
        application.add_handler(CallbackQueryHandler(challenge_info, pattern="^challenge_info$"))
        application.add_handler(CallbackQueryHandler(battle_bot, pattern="^battle_bot$"))
        application.add_handler(CallbackQueryHandler(stats, pattern="^stats$"))
        application.add_handler(CallbackQueryHandler(main_menu, pattern="^main_menu$"))
        application.add_handler(CallbackQueryHandler(handle_challenge_response, pattern="^(accept|decline)_"))
        application.add_handler(CallbackQueryHandler(handle_game_action, pattern="^(aim|throw|disrupt|pvp_)"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            handle_all_messages
        ))
        
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway!")
        print("üìù –î–ª—è –≤—ã–∑–æ–≤–∞: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ —Å–ª–æ–≤–æ–º '–°—Ä–∞–∑–∏—Ç—å' –∏–ª–∏ '–î—É—ç–ª—å'")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
